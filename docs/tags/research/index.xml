<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>research on Artem&#39;s Digital Garden</title>
    <link>https://aakatev.github.io/blog/tags/research/</link>
    <description>Recent content in research on Artem&#39;s Digital Garden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 May 2020 08:42:08 -0700</lastBuildDate>
    
	<atom:link href="https://aakatev.github.io/blog/tags/research/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Problem of Centralized State in Web Applications</title>
      <link>https://aakatev.github.io/blog/posts/state-in-web-applications/</link>
      <pubDate>Thu, 21 May 2020 08:42:08 -0700</pubDate>
      
      <guid>https://aakatev.github.io/blog/posts/state-in-web-applications/</guid>
      <description>Intro For one of my senior classes this year, I worked on a project where we were building an online game. As you can imagine, the main issue becomes a question of keeping players in sync with the most recent game state. There are tons of solutions allowing to organize your state in browser, such as Redux, Mobx, or Ngrx. However, the tricky part is to synchronize state between multiple clients, and centralized storage, such as database.</description>
    </item>
    
  </channel>
</rss>