<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>terraform on Artem&#39;s Digital Garden</title>
    <link>/tags/terraform/</link>
    <description>Recent content in terraform on Artem&#39;s Digital Garden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Jul 2020 10:42:08 -0700</lastBuildDate><atom:link href="/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing CD Pipeline for Static Website</title>
      <link>/posts/hugo-cd-pipeline/</link>
      <pubDate>Sun, 05 Jul 2020 10:42:08 -0700</pubDate>
      
      <guid>/posts/hugo-cd-pipeline/</guid>
      <description>One day I decided to create a backup of all my dev.to posts. Programmers are lazy, so I wanted to do as little work as possible, and wanted the final result to look as nice as possible (or at least nicer than Markdown reader on GitHub).
Final requirements for the project were the following:
 Fully static (cheap/free to host) Markdown support (copy and paste existing material) Continuous deployment (automation is good) Easy to maintain (easy is good)  Based on the requirements, I decided on this simple workflow:</description>
    </item>
    
    <item>
      <title>Deploy EC2 Instance in Minutes with Terraform</title>
      <link>/posts/terraform-deploy-ec2/</link>
      <pubDate>Sun, 19 Apr 2020 08:42:08 -0700</pubDate>
      
      <guid>/posts/terraform-deploy-ec2/</guid>
      <description>Everyone using AWS knows that navigating the console could be a major pain. Luckily there is a number of tools aiming to simplify this burden. One of them is Terraform by HashiCorp. Today, I want to introduce the tool, and show how to deploy EC2 instance on aws in minutes.
Overview Firstly, what is Terraform? In short, it is an IaC (Infrastructure as Code) tool easing a process of delivering software.</description>
    </item>
    
  </channel>
</rss>
