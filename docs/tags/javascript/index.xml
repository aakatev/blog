<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Artem&#39;s Digital Garden</title>
    <link>https://aakatev.github.io/blog/tags/javascript/</link>
    <description>Recent content in javascript on Artem&#39;s Digital Garden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Jun 2020 08:42:08 -0700</lastBuildDate><atom:link href="https://aakatev.github.io/blog/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intro to Functional JavaScript</title>
      <link>https://aakatev.github.io/blog/posts/javascript-functional-intro/</link>
      <pubDate>Sat, 06 Jun 2020 08:42:08 -0700</pubDate>
      
      <guid>https://aakatev.github.io/blog/posts/javascript-functional-intro/</guid>
      <description>This article is based on my old cheatsheet. It only includes methods provided by Vanilla JS. If you are looking for more advanced patterns, I recommend to look into Ramda.
 Do you know that out of the box JavaScript has some amazing parts, making it suitable for Functional Programming?
Folding, Reduction, and Filtering Let&amp;rsquo;s say we have ten bank accounts.
let accounts = [ { id: 0, balance: 122.</description>
    </item>
    
    <item>
      <title>Three.JS-Webpack Boilerplate</title>
      <link>https://aakatev.github.io/blog/posts/three-js-webpack-boilerplate/</link>
      <pubDate>Tue, 21 Apr 2020 08:42:08 -0700</pubDate>
      
      <guid>https://aakatev.github.io/blog/posts/three-js-webpack-boilerplate/</guid>
      <description>Overview Three.JS is an awesome library. It is based on WebGL, and has a straightforward, and well-documented API. However, I found that project&amp;rsquo;s initial setup may require some boilerplate.
I created some minimal configuration to bootstrap a project, and want to share with everyone. It includes webpack, webpack-dev-server, and prettier. I also included one of three.js demo projects, to test deployment on GitHub pages.
The boilerplate is available on GitHub, and you can play with the demo here.</description>
    </item>
    
    <item>
      <title>Counter Using Functional Approach in Javascript</title>
      <link>https://aakatev.github.io/blog/posts/javascript-functional-counter/</link>
      <pubDate>Thu, 16 Apr 2020 08:42:08 -0700</pubDate>
      
      <guid>https://aakatev.github.io/blog/posts/javascript-functional-counter/</guid>
      <description>In my previous post, I showed my readers how to implement Singleton in JavaScript using closure, and IIFE.
This time, I want to show you how to utilize the same building blocks, as well as one more functional programming technique, to implement a basic counter!
Let&amp;rsquo;s start with a counter that takes a starting number as an argument, and uses closure to keep track of the current count:
function from(start) { let i = start - 1 function inc() { i = i + 1 return i } return inc } As you can see, I have outer function from() which takes parameter start.</description>
    </item>
    
    <item>
      <title>Singleton Pattern in JavaScript</title>
      <link>https://aakatev.github.io/blog/posts/javascript-singleton/</link>
      <pubDate>Sun, 12 Apr 2020 08:42:08 -0700</pubDate>
      
      <guid>https://aakatev.github.io/blog/posts/javascript-singleton/</guid>
      <description>If you come from Java or C++ background, you are probably used to classic OOP model, and it is hard to imagine how you can implement singleton in JavaScript. The answer to this question is to use closures!
It is the same idea as module patterns, and comes from functional programming. The essence of closure, is creating an inner function in a scope of an outer function. If you know JS, you know that inner function has access to data members that are in the scope of the outer function.</description>
    </item>
    
    <item>
      <title>Getting Data from Cosmos Hub using Node JS</title>
      <link>https://aakatev.github.io/blog/posts/cosmos-hub-extract-data/</link>
      <pubDate>Fri, 10 Apr 2020 08:42:08 -0700</pubDate>
      
      <guid>https://aakatev.github.io/blog/posts/cosmos-hub-extract-data/</guid>
      <description>In my opinion Cosmos SDK is a really interesting project. My favorite part of their development is IBC. I like the idea of having a protocol for different Blockchains to exchange data in secure and consistent manner. I also like how Tendermint and Cosmos developers find inspiration in the way Internet was implemented. It is one of the topics that excites me either. It is so fascinating how we created all these layers of abstraction and encapsulation, in order to transport data from one physical point to another.</description>
    </item>
    
    <item>
      <title>Multipage Application with Node and Webpack</title>
      <link>https://aakatev.github.io/blog/posts/node-webpack-application/</link>
      <pubDate>Sat, 04 Apr 2020 08:42:08 -0700</pubDate>
      
      <guid>https://aakatev.github.io/blog/posts/node-webpack-application/</guid>
      <description>A quick tutorial on how to configure Webpack with multiple outputs. Building Web Applications with Node is easy! There is a great number of frameworks, and tools that help programmer to bootstrap an environment and start working in just a matter of seconds. Some of them generate a bunch of boilerplate, like Create React App, while others help to eliminate it, like Gatsby. In one case, you might have a setup that you might not necessary want, in another, you are bound to certain conventions.</description>
    </item>
    
  </channel>
</rss>
